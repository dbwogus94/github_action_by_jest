# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: PR Test

# event 감지 : push와 pr 감지
on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ master, test ]

# jobs은 실행 엑션과 엑션을 위한 설정 모음이다. jobs안에 step이 들어간다
jobs:
  # Job ID: 문자와 -(대시), _(언더바)로 구성된 Job 고유 식별자
  Run_Jest:
    # 우분투 가상환경 사용
    runs-on: ubuntu-latest
    environment: .env.test   # 사용할 secrets 스코프
    env:                     # secrets에 있는 비밀정보를 통해 환경변수 설정
      # mysql
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DIALECT: ${{ secrets.MYSQL_DIALECT }}
      # server config
      HOST_PORT: ${{ secrets.HOST_PORT }} 
    strategy:
      matrix:
        node-version: [14.x]   
        # 테스트 할 노드 버전, 
        # 배열이며, 다른 버전을 추가하면 모든 버전에 대해 병렬로 테스트 진행
        # 여러 버전을 테스트 하려면 node_modules는 케싱해서 사용해야한다.
    
    # steps 해아하는 엑션 모음
    steps:
    # step 1) 기본 MySQL 종료
    - name: Shutdown Ubuntu MySQL (SUDO)
      run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it
    
    # step 2) MySQL 데몬을 띄운다. (service container를 쓸 수도 있습니다.)
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306
        container port: 3306
        mysql version: '8.0.26'
        mysql database: ${{ secrets.MYSQL_DATABASE }}
        mysql user: ${{ secrets.MYSQL_USER }}
        mysql root password: ${{ secrets.MYSQL_PASSWORD }}
        mysql password: ${{ secrets.MYSQL_PASSWORD }}
    
    # step 3) Step은 리포지토리를 체크아웃 하여 테스트 준비 
    - uses: actions/checkout@v2          # uses 이미 정의된 actions 사용하는 것
    
    # step 4) node 설치
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        
    # step 5) npm으로 모듈 모두 설치 - npm install 사용x
    - name: Install dependencies - npm ci
      # package-lock.json을 사용하여 dependencies 설치
      run: npm ci     
      
    # step 6) jest 테스트 시작
    - name: run test code
      run: npm test
      
    # step 7) 테스트 실패시
    - name: if fail
      uses: actions/github-script@0.2.0  # 마켓플레이스에서 github-script 액션을 사용한다.
      
      with:
        # github-script를 사용하려면 token 필요
        github-token: ${{github.token}}  # github token을 선언해준다
        # github-script에 원하는 스크립트를 작성
        script: |                        
          const ref = "${{github.ref}}"
          const pull_number = Number(ref.split("/")[2])
          await github.pulls.createReview({
            ...context.repo,
            pull_number,
            body:"테스트코드를 다시 확인해주세요. ",
            event: "REQUEST_CHANGES"
          })
          await github.pulls.update({
            ...context.repo,
            pull_number,
            state: "closed"
                })
     
      if: failure()   # step 7) if fail의 마지막 코드
      # failure() : 이전 step이 실패한 경우에만 이 step을 실행한다
      # 즉, stap 6)인 "run test code"가 실패한 경우 step 7)인 "if fail"이 실행된다.
